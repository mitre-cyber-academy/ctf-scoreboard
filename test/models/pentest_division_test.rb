require 'test_helper'

class PentestDivisionTest < ActiveSupport::TestCase
  def setup
    @game = create(:active_pentest_game, start: 1.hour.ago, stop: 10.hours.from_now)
    @division = create(:pentest_division)
    @defensive_team = create(:pentest_team, division: @division)
    @challenge = create(
                  :pentest_challenge,
                  point_value: 100,
                  first_capture_point_bonus: 75,
                  initial_shares: 1000,
                  unsolved_increment_period: 2, # Hours
                  unsolved_increment_points: 100,
                  solved_decrement_period: 2, # Hours
                  solved_decrement_shares: 200,
                  defense_period: 2, # Hours
                  defense_points: 200,
                  flag_count: 0
                )
    @flag = create(:pentest_flag, challenge: @challenge, team: @defensive_team)
  end

  # Since the team score is proxied through the division, it makes sense to test it along with the
  # other division code
  test 'a solved challenge calculates offensive and defensive points properly' do
    @game = create(:game, start: 2.hours.ago)
    offensive_team = create(:pentest_team, division: @division)
    assert_equal 200, @defensive_team.score
    assert_equal 0, offensive_team.score
    create(:pentest_solved_challenge, team: offensive_team, challenge: @challenge, created_at: @game.start + 1.hour)
    # We create the pentest_solved_challenge in the past so the defense score decreases in this case
    assert_equal 100, @defensive_team.score
    assert_equal true, @flag.solved?
    assert_equal 225, offensive_team.score
  end

  # Team 1 solves the challenge 1 hour after the game starts. (worth 1000 shares)
  # This makes the challenge worth 100 + 50 = 150 points
  # Defensive scoring therefore stops after 1 hour (worth 100 defensive points)
  # Team 2 solves the challenge 2 hours after the game starts. (worth 990 shares)
  # Team 3 solves the challenge 4 hours after the game starts. (worth 985 shares)
  test 'shares are properly divided between teams' do
    @game = create(:game, start: 4.hours.ago)
    teams = create_list(:pentest_team, 3, division: @division)
    create(:pentest_solved_challenge, team: teams[0], challenge: @challenge, created_at: @game.start + 1.hour)
    create(:pentest_solved_challenge, team: teams[1], challenge: @challenge, created_at: @game.start + 2.hours)
    create(:pentest_solved_challenge, team: teams[2], challenge: @challenge, created_at: @game.start + 4.hours)
    # TODO: FINISH ME
  end

  test 'calculations stop when the game ends' do

  end

  test 'ordered_teams' do
    @division.ordered_teams(true)
  end
end
