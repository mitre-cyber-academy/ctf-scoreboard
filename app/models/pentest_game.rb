# frozen_string_literal: true

class PentestGame < Game
  with_options dependent: :destroy do
    has_many :divisions, foreign_key: 'game_id', class_name: 'PentestDivision', inverse_of: :game
    has_many :teams, through: :divisions
    has_many :users, through: :teams
    has_many :feed_items, through: :divisions
    has_many :achievements, through: :divisions
    has_many :solved_challenges, through: :divisions
  end

  has_many :challenges, inverse_of: :pentest_game, class_name: 'PentestChallenge', dependent: :destroy
  has_many :flags, through: :challenges

  alias load_categories_or_teams teams

  # This method returns either the current time in UTC or end of the game if the game is over.
  # The end of the defense time is either the end of the game or current time if we are during the game
  def defense_end
    open? ? Time.now.utc : stop
  end

  def teams_associated_with_flags_and_challenges
    rv = {}
    teams.each do |team|
      rv[team.team_name] = {}
      challenges.each_with_index do |challenge, i|
        matched_flag = flags.find do |flag|
          flag.team_id.eql?(team.id) && flag.challenge_id.eql?(challenge.id)
        end
        rv[team.team_name][i.to_s] = {}
        rv[team.team_name][i.to_s].merge!(flag: matched_flag, challenge: challenge)
      end
    end
    rv
  end
end
