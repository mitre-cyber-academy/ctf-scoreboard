# frozen_string_literal: true

class PentestSolvedChallenge < SolvedChallenge
  scope :group_by_defense_team, ->(team) { where(team: team).joins(challenge: :category).group('categories.name') }

  belongs_to :flag, foreign_key: 'flag_id', class_name: 'PentestFlag', optional: false, inverse_of: :solved_challenges
  belongs_to :division, class_name: 'PentestDivision', inverse_of: :solved_challenges, foreign_key: 'division_id',
                        optional: false
  belongs_to :challenge, class_name: 'PentestChallenge', foreign_key: 'challenge_id', optional: false,
                         inverse_of: :solved_challenges

  def team_can_solve_challenge
    super unless challenge.can_be_solved_by(team, flag)
  end

  def self.solves_by_category_for(team)
    asc = where(team: team).joins(flag: :team).group('teams.team_name').count
    dpc = where(team: team).includes(:challenge).to_a.reject { |sc| !sc.challenge.design_phase }.count
    asc.merge!({'Design Phase': dpc})
  end
end
