# frozen_string_literal: true

class PentestSolvedChallenge < SolvedChallenge
  scope :group_by_defense_team, -> (team) { where(team: team).joins(challenge: :category).group('categories.name') }

  belongs_to :flag, foreign_key: 'flag_id', class_name: 'PentestFlag', optional: false, inverse_of: :solved_challenges
  belongs_to :division, foreign_key: 'division_id', class_name: 'PentestDivision', optional: false
  belongs_to :challenge, foreign_key: 'challenge_id', class_name: 'PentestChallenge', optional: false

  def team_can_solve_challenge
    super unless challenge.can_be_solved_by(team, flag)
  end

  def self.solves_by_category_for(team)
    where(team: team).joins(flag: :team).group('teams.team_name').count
  end
end
