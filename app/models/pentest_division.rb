class PentestDivision < Division
  belongs_to :game, optional: false, class_name: 'PentestGame', inverse_of: :divisions

  has_many :solved_challenges, foreign_key: 'division_id', class_name: 'PentestSolvedChallenge', dependent: :destroy
  has_many :flags, class_name: 'PentestFlag', through: :teams

  def ordered_teams(only_top_five = false)
    teams = calculate_score
    teams.sort_by!(&:current_score).reverse!
    # if true return the first five in array
    if only_top_five
      # Then take the first 5 elements in array
      teams[0..4]
    else
      teams
    end
  end

  def calculate_score
    team_standings = {}
    flags.includes({solved_challenges: [:team, :challenge]}, :team, :challenge).each do |flag|
      team_standings.merge_and_sum(flag.calc_points_for_solved_challenges)
    end
    team_standings.map {|team, points| team.current_score = points.round; team}
  end

end
