# frozen_string_literal: true

class PentestDivision < Division
  belongs_to :game, optional: false, class_name: 'PentestGame', inverse_of: :divisions

  has_many :solved_challenges,
           foreign_key: 'division_id',
           inverse_of: :division,
           class_name: 'PentestSolvedChallenge',
           dependent: :destroy
  has_many :flags, class_name: 'PentestFlag', through: :teams
  has_many :score_adjustments, through: :teams

  def ordered_teams(only_top_five = false)
    teams = calculate_score
    teams.sort_by!(&:current_score).reverse!
    # if true return the first five in array
    if only_top_five
      # Then take the first 5 elements in array
      teams[0..4]
    else
      teams
    end
  end

  private

  def calculate_score
    team_standings = {}
    # rubocop:disable Rails/FindEach
    # rubocop reports a false positive
    game.design_phase_challenges.each do |challenge|
      team_standings.merge_and_sum(challenge.flags.first.calc_points_for_solved_challenges)
    end
    flags.preload(:solved_challenges).each do |flag|
      team_standings.merge_and_sum(flag.calc_points_for_solved_challenges)
    end
    # rubocop:enable Rails/FindEach
    team_standings.merge_and_sum(score_adjustments.group(:team).sum('point_value'))
    team_standings.map do |team, points|
      team.current_score = points.round
      team
    end
  end
end
